import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import sqlite3
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 123456789  # –í–∞—à ID –≤ Telegram

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS subscribers (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            join_date TEXT
        )
        """
    )
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS scheduled_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            content TEXT,
            media_type TEXT,  # 'photo', 'video', None
            media_id TEXT,  # file_id –≤ Telegram
            scheduled_time TEXT,
            is_sent INTEGER DEFAULT 0
        )
        """
    )
    conn.commit()
    conn.close()

init_db()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

# –°—Ç–∞—Ä—Ç –∏ –ø–æ–¥–ø–∏—Å–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    cursor.execute("SELECT * FROM subscribers WHERE user_id=?", (user.id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO subscribers (user_id, username, first_name, last_name, join_date) VALUES (?, ?, ?, ?, ?)",
            (user.id, user.username, user.first_name, user.last_name, datetime.now().isoformat()),
        )
        conn.commit()
        await update.message.reply_text(
            "üíñ –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. "
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /unsubscribe."
        )
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞! üíå")
    
    conn.close()

# –û—Ç–ø–∏—Å–∫–∞
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM subscribers WHERE user_id=?", (user.id,))
    conn.commit()
    conn.close()
    await update.message.reply_text("–¢—ã –æ—Ç–ø–∏—Å–∞–ª–∞—Å—å. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /start. üíî")

# –ê–¥–º–∏–Ω: —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def admin_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞
    if update.message.photo:
        media_type = "photo"
        media_id = update.message.photo[-1].file_id
    elif update.message.video:
        media_type = "video"
        media_id = update.message.video.file_id
    else:
        media_type = None
        media_id = None
    
    text = update.message.caption or update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO scheduled_messages (content, media_type, media_id, scheduled_time) VALUES (?, ?, ?, ?)",
        (text, media_type, media_id, datetime.now().isoformat()),
    )
    conn.commit()
    conn.close()
    
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!")

# –ê–¥–º–∏–Ω: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
async def admin_schedule_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    # –ü—Ä–∏–º–µ—Ä: /schedule 2025-05-15 14:30
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /schedule –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return
    
    try:
        scheduled_time = datetime.strptime(f"{args[0]} {args[1]}", "%Y-%m-%d %H:%M")
        
        if update.message.photo:
            media_type = "photo"
            media_id = update.message.photo[-1].file_id
        elif update.message.video:
            media_type = "video"
            media_id = update.message.video.file_id
        else:
            media_type = None
            media_id = None
        
        text = update.message.caption or update.message.text
        
        conn = sqlite3.connect("bot.db")
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO scheduled_messages (content, media_type, media_id, scheduled_time) VALUES (?, ?, ?, ?)",
            (text, media_type, media_id, scheduled_time.isoformat()),
        )
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time}!")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")

# –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_scheduled_messages(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT * FROM scheduled_messages WHERE is_sent = 0 AND scheduled_time <= ?",
        (datetime.now().isoformat(),),
    )
    messages = cursor.fetchall()
    
    for msg in messages:
        msg_id, content, media_type, media_id, scheduled_time, is_sent = msg
        cursor.execute("SELECT user_id FROM subscribers")
        subscribers = cursor.fetchall()
        
        for (user_id,) in subscribers:
            try:
                if media_type == "photo":
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=media_id,
                        caption=content,
                    )
                elif media_type == "video":
                    await context.bot.send_video(
                        chat_id=user_id,
                        video=media_id,
                        caption=content,
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=content,
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")
        
        cursor.execute(
            "UPDATE scheduled_messages SET is_sent = 1 WHERE id = ?",
            (msg_id,),
        )
        conn.commit()
    
    conn.close()

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("send", admin_send_message, filters=filters.User(ADMIN_ID)))
    application.add_handler(CommandHandler("schedule", admin_schedule_post, filters=filters.User(ADMIN_ID)))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
    application.job_queue.run_repeating(send_scheduled_messages, interval=60.0)
    
    application.run_polling()

if __name__ == "__main__":
    main()