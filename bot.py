import asyncio
import sqlite3
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

TOKEN = "7782978236:AAE3BTnm2KssSGPoXETj4SbFJCPv2OZKc9Y"
ADMIN_ID = 5288319146  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- DB Setup ---
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS posts (id INTEGER PRIMARY KEY AUTOINCREMENT, text TEXT, media TEXT, media_type TEXT, scheduled_time TEXT)''')
conn.commit()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ ---
TEMPLATE_REPLIES = [
    "–¢—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Ç–µ–±—è –≤–µ—Å—Ç–æ—á–∫—É üíå",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–∏—à–µ—à—å. –≠—Ç–æ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ üå∑",
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –¥–µ–Ω—å —á—É—Ç—å —Å–≤–µ—Ç–ª–µ–µ ‚òÄÔ∏è",
    "–ö–∞–∫ –∂–µ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º, —Ö–æ—Ç—å –∏ –ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É —ç–∫—Ä–∞–Ω–∞ üå∏",
    "–¢—ã —É–º–µ–µ—à—å —Å–æ–≥—Ä–µ–≤–∞—Ç—å —Å–≤–æ–µ–π –¥–æ–±—Ä–æ—Ç–æ–π –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–º üåº",
    "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –Ω–∞—Ö–æ–¥–∫–∞. –ù–µ –∑–∞–±—ã–≤–∞–π –æ–± —ç—Ç–æ–º üåü",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞. –û–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã ‚ù§Ô∏è",
    "–° —Ç–æ–±–æ–π –¥–µ–ª–∏—Ç—å—Å—è –¥–æ–±—Ä–æ–º ‚Äî –æ–¥–Ω–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ üíñ",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á–∏–∫ —Å–æ–ª–Ω—Ü–∞ –≤ —Ö–º—É—Ä—ã–π –¥–µ–Ω—å üå§",
    "–¢–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å —Å–≤–µ—Ç–ª–µ–µ. –ë–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è üåπ"
]

# --- In-memory storage ---
user_states = {}
user_data = {}

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º–∏ ---
auto_responses_enabled = True

# --- Reply Keyboard Generators ---
def get_admin_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
    kb.button(text="–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
    kb.button(text="–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤")
    kb.button(text="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã" if not auto_responses_enabled else "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

def get_cancel_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞")
    return kb.as_markup(resize_keyboard=True)

def get_post_keyboard(post_id):
    kb = ReplyKeyboardBuilder()
    kb.button(text=f"–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç {post_id}")
    kb.button(text=f"–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ {post_id}")
    kb.button(text=f"–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É {post_id}")
    kb.button(text=f"–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç {post_id}")
    kb.button(text="–ù–∞–∑–∞–¥")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

def get_posts_list_keyboard():
    cursor.execute("SELECT id FROM posts")
    posts = cursor.fetchall()
    kb = ReplyKeyboardBuilder()
    for post_id, in posts:
        kb.button(text=f"–ü–æ—Å—Ç {post_id}")
    kb.button(text="–ù–∞–∑–∞–¥")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

# --- Handlers ---
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ç—ë–ø–ª—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è ‚ù§Ô∏è")

@dp.message(Command("admin"))
async def admin_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
async def add_post_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_states[message.from_user.id] = "awaiting_text"
    await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞):", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
async def list_posts_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT id, text, scheduled_time FROM posts ORDER BY scheduled_time")
    posts = cursor.fetchall()
    if not posts:
        await message.answer("–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_keyboard())
    else:
        posts_text = "\n".join(f"{post_id}. {text} (–û—Ç–ø—Ä–∞–≤–∫–∞: {scheduled_time})" for post_id, text, scheduled_time in posts)
        await message.answer(f"–¢–µ–∫—É—â–∏–µ –ø–æ—Å—Ç—ã:\n{posts_text}", reply_markup=get_posts_list_keyboard())

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤")
async def list_templates_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    templates_text = "\n".join(f"{i+1}. {text}" for i, text in enumerate(TEMPLATE_REPLIES))
    await message.answer(f"–¢–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã:\n{templates_text}", reply_markup=get_admin_keyboard())

@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message):
    user_id = message.from_user.id
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())

@dp.message(F.text == "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã")
async def enable_auto_responses_handler(message: types.Message):
    global auto_responses_enabled
    if message.from_user.id != ADMIN_ID:
        return
    auto_responses_enabled = True
    await message.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ", reply_markup=get_admin_keyboard())

@dp.message(F.text == "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã")
async def disable_auto_responses_handler(message: types.Message):
    global auto_responses_enabled
    if message.from_user.id != ADMIN_ID:
        return
    auto_responses_enabled = False
    await message.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå", reply_markup=get_admin_keyboard())

@dp.message()
async def universal_handler(message: types.Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)

    if state == "awaiting_text":
        user_data[user_id] = {"text": message.text or ""}
        user_states[user_id] = "awaiting_media"
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.", reply_markup=get_cancel_keyboard())
        return

    if state == "awaiting_media":
        text = user_data[user_id]["text"]
        media = None
        media_type = None
        if message.photo:
            media = message.photo[-1].file_id
            media_type = "photo"
        elif message.video:
            media = message.video.file_id
            media_type = "video"
        elif message.text.lower() == "–Ω–µ—Ç":
            pass
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ '–Ω–µ—Ç'", reply_markup=get_cancel_keyboard())
            return

        user_data[user_id].update({"media": media, "media_type": media_type})
        user_states[user_id] = "awaiting_date"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.05.2025):", reply_markup=get_cancel_keyboard())
        return

    if state == "awaiting_date":
        date_str = message.text.strip()
        try:
            scheduled_date = datetime.strptime(date_str, "%d.%m.%Y")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.05.2025):", reply_markup=get_cancel_keyboard())
            return

        user_data[user_id].update({"scheduled_date": scheduled_date})
        user_states[user_id] = "awaiting_time"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", reply_markup=get_cancel_keyboard())
        return

    if state == "awaiting_time":
        time_str = message.text.strip()
        try:
            scheduled_time = datetime.strptime(time_str, "%H:%M")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", reply_markup=get_cancel_keyboard())
            return

        scheduled_datetime = datetime.combine(user_data[user_id]["scheduled_date"], scheduled_time.time())
        if scheduled_datetime < datetime.now():
            await message.answer("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.", reply_markup=get_cancel_keyboard())
            return

        data = user_data[user_id]
        cursor.execute("INSERT INTO posts (text, media, media_type, scheduled_time) VALUES (?, ?, ?, ?)",
                       (data["text"], data["media"], data["media_type"], scheduled_datetime.isoformat()))
        conn.commit()
        await message.answer(f"–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_datetime.strftime('%Y-%m-%d %H:%M')}", reply_markup=get_admin_keyboard())
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    if state == "awaiting_edit_post_text":
        post_id = user_data[user_id]["post_id"]
        cursor.execute("UPDATE posts SET text = ? WHERE id = ?", (message.text, post_id))
        conn.commit()
        await message.answer("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", reply_markup=get_admin_keyboard())
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    if state == "awaiting_edit_post_media":
        post_id = user_data[user_id]["post_id"]
        media = None
        media_type = None
        if message.photo:
            media = message.photo[-1].file_id
            media_type = "photo"
        elif message.video:
            media = message.video.file_id
            media_type = "video"
        elif message.text.lower() == "–Ω–µ—Ç":
            pass
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ '–Ω–µ—Ç'", reply_markup=get_cancel_keyboard())
            return

        cursor.execute("UPDATE posts SET media = ?, media_type = ? WHERE id = ?", (media, media_type, post_id))
        conn.commit()
        await message.answer("–ú–µ–¥–∏–∞ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=get_admin_keyboard())
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    if state == "awaiting_edit_post_date":
        post_id = user_data[user_id]["post_id"]
        date_str = message.text.strip()
        try:
            scheduled_date = datetime.strptime(date_str, "%d.%m.%Y")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.05.2025):", reply_markup=get_cancel_keyboard())
            return

        user_data[user_id].update({"scheduled_date": scheduled_date})
        user_states[user_id] = "awaiting_edit_post_time"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", reply_markup=get_cancel_keyboard())
        return

    if state == "awaiting_edit_post_time":
        post_id = user_data[user_id]["post_id"]
        time_str = message.text.strip()
        try:
            scheduled_time = datetime.strptime(time_str, "%H:%M")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", reply_markup=get_cancel_keyboard())
            return

        scheduled_datetime = datetime.combine(user_data[user_id]["scheduled_date"], scheduled_time.time())
        if scheduled_datetime < datetime.now():
            await message.answer("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.", reply_markup=get_cancel_keyboard())
            return

        cursor.execute("UPDATE posts SET scheduled_time = ? WHERE id = ?", (scheduled_datetime.isoformat(), post_id))
        conn.commit()
        await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ", reply_markup=get_admin_keyboard())
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    if message.text.startswith("–ü–æ—Å—Ç "):
        post_id = int(message.text.split()[1])
        cursor.execute("SELECT text, media, media_type, scheduled_time FROM posts WHERE id = ?", (post_id,))
        post = cursor.fetchone()
        if post:
            text, media, media_type, scheduled_time = post
            scheduled_time_formatted = datetime.fromisoformat(scheduled_time).strftime("%d.%m.%Y %H:%M")
            media_info = f"–ú–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else '–í–∏–¥–µ–æ' if media_type == 'video' else '–ù–µ—Ç'}"
            await message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ {post_id}:\n{text}\n{media_info}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {scheduled_time_formatted}", reply_markup=get_post_keyboard(post_id))
        else:
            await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
        return

    if message.text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "):
        post_id = int(message.text.split()[2])
        cursor.execute("SELECT text FROM posts WHERE id = ?", (post_id,))
        post = cursor.fetchone()
        if post:
            user_states[user_id] = "awaiting_edit_post_text"
            user_data[user_id] = {"post_id": post_id}
            await message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ {post_id}:\n{post[0]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=get_cancel_keyboard())
        else:
            await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
        return

    if message.text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ "):
        post_id = int(message.text.split()[2])
        user_states[user_id] = "awaiting_edit_post_media"
        user_data[user_id] = {"post_id": post_id}
        await message.answer("–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç:", reply_markup=get_cancel_keyboard())
        return

    if message.text.startswith("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É "):
        post_id = int(message.text.split()[2])
        user_states[user_id] = "awaiting_edit_post_date"
        user_data[user_id] = {"post_id": post_id}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.05.2025):", reply_markup=get_cancel_keyboard())
        return

    if message.text.startswith("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç "):
        post_id = int(message.text.split()[2])
        cursor.execute("DELETE FROM posts WHERE id = ?", (post_id,))
        conn.commit()
        await message.answer(f"–ü–æ—Å—Ç {post_id} —É–¥–∞–ª—ë–Ω ‚úÖ", reply_markup=get_admin_keyboard())
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_admin_keyboard())
        return

    if message.text.startswith("/"):
        return

    if auto_responses_enabled and TEMPLATE_REPLIES:
        reply = random.choice(TEMPLATE_REPLIES)
        await message.answer(reply)

# --- Job ---
async def send_scheduled_posts():
    now = datetime.now().replace(second=0, microsecond=0)
    cursor.execute("SELECT * FROM posts WHERE scheduled_time <= ?", (now.isoformat(),))
    posts = cursor.fetchall()
    if posts:
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        for post in posts:
            _, text, media, media_type, _ = post
            for user in users:
                user_id = user[0]
                try:
                    if media:
                        if media_type == "photo":
                            await bot.send_photo(user_id, photo=media, caption=text)
                        elif media_type == "video":
                            await bot.send_video(user_id, video=media, caption=text)
                    else:
                        await bot.send_message(user_id, text)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        cursor.execute("DELETE FROM posts WHERE scheduled_time <= ?", (now.isoformat(),))
        conn.commit()

async def scheduler_loop():
    while True:
        await send_scheduled_posts()
        await asyncio.sleep(60)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await asyncio.gather(
        dp.start_polling(bot),
        scheduler_loop(),
    )

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())